{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPersonObject","post","id","delete","newObject","put","Filter","value","onChange","RenderPersons","person","onClick","RenderPerson","name","number","PersonForm","valueName","onChangeName","valueNumber","onChangeNumber","onSubmit","type","Notification","message","className","NotificationAdded","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","howToFilter","setHowToFilter","errorMessage","setErrorMessage","addedMessage","setAddedMessage","useEffect","personService","initialPersons","event","console","log","target","toLowerCase","preventDefault","nameOnko","i","window","confirm","updatePersonObject","returnedPerson","map","setTimeout","catch","error","length","concat","filter","toLocaleLowerCase","includes","filteredPerson","item","removePerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f78c2bf7.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\n//Haetaan kaikki henkilöoliot ja palautetaan taulukkona\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Luodaan uusi persons objecti\r\nconst create = newPersonObject => {\r\n    const request = axios.post(baseUrl, newPersonObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Poistetaan persons objecti\r\nconst removePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\n//Päivitetään persons objectia\r\nconst updatePerson = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Exportataan kaikki muualle käyttöön\r\nexport default {\r\n    getAll, create, removePerson, updatePerson,\r\n}","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\nimport './index.css'\r\n\r\n\r\n//Henkilön filteröimiseen filter shown with: -kenttä\r\nconst Filter = ({ value, onChange }) => {\r\n\r\n    return (\r\n        <div>\r\n            filter shown with: <input value={value} onChange={onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Henkilön renderöimiseen webbisivulle delete napilla\r\nconst RenderPersons = ({ person, onClick }) => {\r\n    return (\r\n        <div>\r\n            <RenderPerson person={person} onClick={onClick} />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Yksittäisen henkilön renderöiminen delete napilla\r\nconst RenderPerson = ({ person, onClick }) => {\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <>{person.name} {person.number}</>\r\n            <button key={person.id} onClick={onClick}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tällä luodaan uusi Person numeroineen phonebookiin\r\nconst PersonForm = ({ valueName, onChangeName, valueNumber, onChangeNumber, onSubmit }) => {\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    Name: <input value={valueName} onChange={onChangeName} />\r\n                </div>\r\n                <div>\r\n                    Number: <input value={valueNumber} onChange={onChangeNumber} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tällä muotoillaan notificaatio henkilön poistamiseen\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tällä muotoillaan notificaatio henkilön lisämiseen\r\nconst NotificationAdded = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"added\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([])\r\n    //Muuttujia jotka toimivat dynaamisesti change\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [howToFilter, setHowToFilter] = useState('')\r\n    //Notificaatioille tilat\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    const [addedMessage, setAddedMessage] = useState(null)\r\n\r\n    //Tällä haetaan data db.json filestä ja asetetaan persons\r\n    //taulukkoon. Tietokantakysely viety omaan moduuliin src/services/persons.js\r\n    //Tässä käytetään personServiceä, joka importattu\r\n    useEffect(() => {\r\n        personService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                setPersons(initialPersons)\r\n            })\r\n    }, [])\r\n\r\n    //console.log('Persons tauluko koko', persons.length)\r\n\r\n    //Uuden nimen lisäys ja phonenumeron päivitys\r\n    const addName = (event) => {\r\n        //Estää lomakkeen lähetyksen oletusarvoisen toiminnan, \r\n        //joka aiheuttaisi mm. sivun uudelleenlatautumisen. \r\n        event.preventDefault()\r\n        //Muuttuja sitä varten, jos henkilö jo phonebookissa\r\n        let nameOnko = ''\r\n        //Annetaan varoitus, jos nimi on jo lisättynä ja pyydetään hyväksymään päivitys\r\n        for (let i = 0; i < persons.length; i++) {\r\n            console.log('Nimet', persons[i])\r\n            if (persons[i].name === newName) {\r\n                //Otetaan nimi talteen, jotta ei tee uutta lisäystä\r\n                nameOnko = newName\r\n                //Confirmoitava alertti, jolla voidaan päättää päivitetäänkö numero vai ei\r\n                if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                    //Luodaan uusi person object\r\n                    //Huom! ei id:tä, koska annetaan se palvelimen vastuulle luoda\r\n                    const updatePersonObject = {\r\n                        name: newName,\r\n                        number: newNumber,\r\n                    }\r\n                    //Viedään uusi person object db.json fileen eli tietokantaan\r\n                    //Tietokanta post action viety omaan moduuliin src/services/persons.js\r\n                    //Tässä käytetään personServiceä, joka imporattu\r\n                    personService\r\n                        .updatePerson(persons[i].id, updatePersonObject)\r\n                        .then(returnedPerson => {\r\n                            //Päivitetään persons taulukkoa niin ettei vanhaa enää sieltä löydy ja lisätään\r\n                            //päivitetty person\r\n                            setPersons(persons.map(person => person.id !== persons[i].id ? person : returnedPerson))\r\n                            //Tyhjätään setNewName ja number kentät\r\n                            setNewName('')\r\n                            setNewNumber('')\r\n                            console.log('Success!')\r\n                            //Sealimeen 5sec viesti, jos päivitys tietokantaan onnistui\r\n                            setAddedMessage('Person ' + `${updatePersonObject.name}` + ' succefully changed')\r\n                            setTimeout(() => {\r\n                                setAddedMessage(null)\r\n                            }, 5000)\r\n                        })\r\n                        //Selaimeen 5sec viesti, jos päivitys tietokantaan ei onnistunut\r\n                        //Esim. poistaa toisella selaimella henkilön ja samaan aikaan yrittää päivittää\r\n                        //Juuri poistetun henkilön tiedot\r\n                        .catch(error => {\r\n                            setErrorMessage('Information of ' + `${updatePersonObject.name}` + ' has already been removed from server')\r\n                            setTimeout(() => {\r\n                                setErrorMessage(null)\r\n                            }, 5000)\r\n                            console.log('Person update failed')\r\n                        })\r\n                }\r\n            }\r\n        }\r\n        //Jos henkilöä ei ole kannassa, niin luodaan uusi Person\r\n        if (nameOnko === '') {\r\n            console.log('Uuden luominen, koska ei ollut kannassa')\r\n            //Luodaan uusi person object\r\n            //Huom! ei id:tä, koska annetaan se palvelimen vastuulle luoda\r\n            const newPersonObject = {\r\n                name: newName,\r\n                number: newNumber,\r\n            }\r\n            //Viedään uusi person object db.json fileen eli tietokantaan\r\n            //Tietokanta post action viety omaan moduuliin src/services/persons.js\r\n            //Tässä käytetään personServiceä, joka imporattu\r\n            personService\r\n                .create(newPersonObject)\r\n                .then(returnedPerson => {\r\n                    setPersons(persons.concat(returnedPerson))\r\n                    //Tyhjätään setNewName ja number kentät\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    console.log('addName function', returnedPerson)\r\n\r\n                })\r\n            //Viesti onnistuneesta lisäyksestä\r\n            setAddedMessage('Person ' + `${newPersonObject.name}` + ' succesfully added')\r\n            console.log(newPersonObject.name)\r\n            //Lisäyksen viestille timeout eli kauanko näkyvillä\r\n            //Ja asetetaan arvoksi sen jälkeen null\r\n            setTimeout(() => {\r\n                setAddedMessage(null)\r\n            }, 5000)\r\n        }\r\n    }\r\n\r\n    //Tapahtumankäsittelijää handleNameChange kutsutaan aina kun \r\n    //syötekomponentissa tapahtuu jotain\r\n    //Tapahtumankäsittelijämetodi saa parametriksi tapahtumaolion event\r\n    const handleNameChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value)\r\n        setNewName(event.target.value)\r\n    }\r\n    const handleNumberChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value)\r\n        setNewNumber(event.target.value)\r\n    }\r\n    const handleFilterChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value.toLowerCase())\r\n        //Muutetaan syöte lower caseksi\r\n        setHowToFilter(event.target.value.toLowerCase())\r\n    }\r\n\r\n    //Henkilön poistaminen\r\n    const removePerson = ({ filteredPerson }) => {\r\n        if (window.confirm(\"Delete \" + `${filteredPerson.name}` + \"?\")) {\r\n            personService\r\n                .removePerson(filteredPerson.id)\r\n            console.log('removePerson', filteredPerson.id)\r\n            //Päivitetään lista persons eli poistetaan listalata ne jotka poistetaan myös\r\n            //Tietokannasta\r\n            setPersons(persons.filter(item => item.name !== filteredPerson.name))\r\n            //Asetetaan viesti onnistuneesta poistosta\r\n            setErrorMessage('Person ' + `${filteredPerson.name}` + ' succesfully removed')\r\n            //Poiston viestille timeout eli kauanko näkyvillä\r\n            //Ja asetetaan arvoksi sen jälkeen null\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            }, 5000)\r\n        }\r\n    }\r\n    //console.log('Persons listan koko ', persons.length)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Filter value={howToFilter} onChange={handleFilterChange} />\r\n\r\n            <h2>Add a new</h2>\r\n            <Notification message={errorMessage} />\r\n            <NotificationAdded message={addedMessage} />\r\n            <PersonForm valueName={newName} onChangeName={handleNameChange} valueNumber={newNumber} onChangeNumber={handleNumberChange} onSubmit={addName} />\r\n\r\n            <h2>Numbers</h2>\r\n            <>\r\n                {persons.filter(person => person.name.toLocaleLowerCase().includes(`${howToFilter}`)).map(filteredPerson => (\r\n                    <RenderPersons key={filteredPerson.id} person={filteredPerson} onClick={() => removePerson({ filteredPerson })} />\r\n                ))\r\n                }\r\n            </>\r\n\r\n      ...<div>debugNameField: {newName}</div>\r\n      ...<div>debugFilterField: {howToFilter}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n"],"sourceRoot":""}