{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPersonObject","post","id","delete","newObject","request","put","console","log","number","Filter","value","onChange","RenderPersons","person","onClick","RenderPerson","name","PersonForm","valueName","onChangeName","valueNumber","onChangeNumber","onSubmit","type","Notification","message","className","NotificationAdded","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","howToFilter","setHowToFilter","errorMessage","setErrorMessage","addedMessage","setAddedMessage","useEffect","personService","initialPersons","event","target","toLowerCase","preventDefault","find","indexNumber","findIndex","window","confirm","updatePersonObject","returnedPerson","map","setTimeout","catch","error","onkoErroria","concat","filter","toLocaleLowerCase","includes","filteredPerson","item","removePerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42bb926d.chunk.js","sourcesContent":["import axios from 'axios'\r\n//Tämä kun käytetään lokaalisti backend frontend yhdistelmää\r\n//const baseUrl = 'http://localhost:3001/api/persons'\r\n//Suhteellinen määritys kun ollaa yhdistetty forntend ja backend\r\n//Ja viedään Herokuun/Herokua varten\r\nconst baseUrl = '/api/persons'\r\n\r\n//Haetaan kaikki henkilöoliot ja palautetaan taulukkona\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Luodaan uusi persons objecti\r\nconst create = newPersonObject => {\r\n    const request = axios.post(baseUrl, newPersonObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Poistetaan persons objecti\r\nconst removePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\n//Päivitetään persons objectia\r\nconst updatePerson = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    console.log('TULIKO SERVICEEN UUSI OBJECTI', newObject.number)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Exportataan kaikki muualle käyttöön\r\nexport default {\r\n    getAll, create, removePerson, updatePerson\r\n}","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\nimport './index.css'\r\n\r\n\r\n//Henkilön filteröimiseen\r\nconst Filter = ({ value, onChange }) => {\r\n\r\n    return (\r\n        <div>\r\n            filter shown with: <input value={value} onChange={onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Henkilön renderöimiseen webbisivulle delete napilla\r\nconst RenderPersons = ({ person, onClick }) => {\r\n    return (\r\n        <div>\r\n            <RenderPerson person={person} onClick={onClick} />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Yksittäisen henkilön renderöiminen delete napilla\r\nconst RenderPerson = ({ person, onClick }) => {\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <>{person.name} {person.number}</>\r\n            <button key={person.id} onClick={onClick}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Lomake Person objectin luomiseen phonebookiin\r\nconst PersonForm = ({ valueName, onChangeName, valueNumber, onChangeNumber, onSubmit }) => {\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    Name: <input value={valueName} onChange={onChangeName} />\r\n                </div>\r\n                <div>\r\n                    Number: <input value={valueNumber} onChange={onChangeNumber} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tällä muotoillaan notificaatio henkilön poistamiseen\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tällä muotoillaan notificaatio henkilön lisämiseen\r\nconst NotificationAdded = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"added\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    //Person objectien tilan ylläpitämiseen\r\n    const [persons, setPersons] = useState([])\r\n    //Muuttujia/tilat jotka toimivat dynaamisesti change\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [howToFilter, setHowToFilter] = useState('')\r\n    //Notificaatioille tilat\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    const [addedMessage, setAddedMessage] = useState(null)\r\n\r\n    //Tällä haetaan data db.json filestä ja/tai Mongosta asetetaan persons\r\n    //taulukkoon. Tietokantakysely viety omaan moduuliin src/services/persons.js\r\n    //Tässä käytetään personServiceä, joka importattu\r\n    useEffect(() => {\r\n        personService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                setPersons(initialPersons)\r\n            })\r\n    }, [])\r\n\r\n    //Uuden nimen lisäys ja phonenumeron päivitys\r\n    const addName = (event) => {\r\n        //Estää lomakkeen lähetyksen oletusarvoisen toiminnan, \r\n        //joka aiheuttaisi mm. sivun uudelleenlatautumisen. \r\n        event.preventDefault()\r\n\r\n        //Tällä voitaisiin myös tsekata, onko nimi jo olemassa kannassa\r\n        //Palauttaa joko True tai False\r\n        const personName = persons.find(person => {\r\n            console.log(person.name, person.id, typeof person.name, newName, typeof newName, person.name === newName)\r\n            return person.name === newName\r\n        })\r\n        //Jos nimi jo kannassa, niin otetaan indeksinumero talteen\r\n        //Jos ei ole, arvoksi tulee -1\r\n        const indexNumber = persons.findIndex(person => person.name === newName)\r\n        console.log('löydetyn indeksinumero', indexNumber)\r\n\r\n        //Jos indexinumero ei ole -1, -1 tarkoittaisi että ei ole kannassa\r\n        if (indexNumber !== -1) {\r\n            //Confirmoitava alertti, jolla voidaan päättää päivitetäänkö numero vai ei\r\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                //Luodaan uusi person object\r\n                //Huom! ei id:tä, koska annetaan se palvelimen vastuulle luoda\r\n                const updatePersonObject = {\r\n                    name: newName,\r\n                    number: newNumber,\r\n                }\r\n                //Viedään uusi person object db.json fileen eli tietokantaan sama koodi toimmii myös Mongoon\r\n                //Update toiminto moduulissa src/services/persons.js\r\n                //Tässä käytetään personServiceä, joka importattu\r\n                personService\r\n                    .updatePerson(persons[indexNumber].id, updatePersonObject)\r\n                    .then(returnedPerson => {\r\n                        console.log('MIKÄ ARVO TULEE TAKAISIN', returnedPerson.id)\r\n                        //Päivitetään persons taulukkoa niin ettei vanhaa enää sieltä löydy ja lisätään\r\n                        //päivitetty person\r\n                        setPersons(persons.map(person => person.id !== persons[indexNumber].id ? person : returnedPerson))\r\n\r\n                        //Tyhjätään setNewName ja number kentät\r\n                        setNewName('')\r\n                        setNewNumber('')\r\n                        console.log('Success!')\r\n                        console.log('TÄMÄ ID PÄIVITETÄÄN', persons[indexNumber].id)\r\n                        console.log('VAIHTUIKO ID VAI ONKO SAMA', returnedPerson.id)\r\n                        console.log('TÄMÄ NUMERO PÄIVITETÄÄN', persons[indexNumber].number)\r\n                        console.log('TÄKSI NUMEROKSI', returnedPerson.number)\r\n                        //Sealimeen 5sec viesti, jos päivitys tietokantaan onnistui\r\n                        setAddedMessage('Person ' + `${updatePersonObject.name}` + ' succefully changed')\r\n                        setTimeout(() => {\r\n                            setAddedMessage(null)\r\n                        }, 5000)\r\n                    })\r\n\r\n                    //Selaimeen 5sec viesti, jos päivitys tietokantaan ei onnistunut\r\n                    //Esim. poistaa toisella selaimella henkilön ja samaan aikaan yrittää päivittää\r\n                    //Juuri poistetun henkilön tiedot\r\n                    .catch(error => {\r\n                        setErrorMessage('Information of ' + `${updatePersonObject.name}` + ' has already been removed from server')\r\n                        setTimeout(() => {\r\n                            setErrorMessage(null)\r\n                        }, 5000)\r\n                        console.log('Person update failed')\r\n                    })\r\n            }\r\n        }\r\n\r\n\r\n        //Jos henkilöä ei ole kannassa, niin luodaan uusi Person\r\n        if (indexNumber === -1) {\r\n            console.log('Uuden luominen, koska ei ollut kannassa')\r\n\r\n            //Luodaan uusi person object\r\n            //Huom! ei id:tä, koska annetaan se palvelimen vastuulle luoda\r\n            const newPersonObject = {\r\n                name: newName,\r\n                number: newNumber,\r\n            }\r\n            //Viedään uusi person object db.json fileen eli tietokantaan sama koodi toimmii myös Mongoon\r\n            //Post toiminto moduuliissa src/services/persons.js\r\n            //Tässä käytetään personServiceä, joka imporattu\r\n            let onkoErroria = false\r\n            personService\r\n                .create(newPersonObject)\r\n                .then(returnedPerson => {\r\n                    setPersons(persons.concat(returnedPerson))\r\n                    //Tyhjätään setNewName ja number kentät\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    console.log('addName function', returnedPerson)\r\n                })\r\n                //Otetaan Mongon validaattorin virhe talteen ja tulosteaan frontendiin\r\n                .catch(error => {\r\n                    if (error.name === 'Error') {\r\n                        //Jos päätyy virheeseen, niin muutetaan onkoErroria muuttujaa\r\n                        onkoErroria = true\r\n                        // pääset käsiksi palvelimen palauttamaan virheilmoitusolioon näin\r\n                        //HUOM! Lopussa vielä \".error\", koska palvelin palauttaa error olion\r\n                        setErrorMessage(error.response.data.error)\r\n                        //Selaimeen voi palauttaa olion ja siksi tässä jätetty lopusta \".error\" pois\r\n                        console.log('VIRHEVIESTI', error.response.data)\r\n                        console.log('VIRHEVIESTI NAME', error.name)\r\n                        console.log('1. ONKO ERRORIA TRUE VAI FALSE', onkoErroria)\r\n                        setTimeout(() => {\r\n                            setErrorMessage(null)\r\n                        }, 5000)\r\n                    }\r\n                })\r\n            console.log('2. ONKO ERRORIA TRUE VAI FALSE', onkoErroria)\r\n            //Jos ei päädy validation erroriin annetaan successfull viesti\r\n            if (onkoErroria===false) {\r\n                //Viesti onnistuneesta lisäyksestä\r\n                setAddedMessage('Person ' + `${newPersonObject.name}` + ' succesfully added')\r\n                console.log(newPersonObject.name)\r\n                //Lisäyksen viestille timeout eli kauanko näkyvillä\r\n                //Ja asetetaan arvoksi sen jälkeen null ettei viestiä näy 5sec jälkeen\r\n                setTimeout(() => {\r\n                    setAddedMessage(null)\r\n                }, 5000)\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    //Tapahtumankäsittelijää handleNameChange kutsutaan aina kun \r\n    //syötekomponentissa tapahtuu jotain\r\n    //Tapahtumankäsittelijämetodi saa parametriksi tapahtumaolion event\r\n    const handleNameChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value)\r\n        setNewName(event.target.value)\r\n    }\r\n    const handleNumberChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value)\r\n        setNewNumber(event.target.value)\r\n    }\r\n    const handleFilterChange = (event) => {\r\n        //Tapahtumaolion kenttä target vastaa kontrolloitua input-kenttää.\r\n        //event.target.value viittaa inputin syötekentän arvoon\r\n        console.log(event.target.value.toLowerCase())\r\n        //Muutetaan syöte lower caseksi\r\n        setHowToFilter(event.target.value.toLowerCase())\r\n    }\r\n\r\n    //Henkilön poistaminen\r\n    const removePerson = ({ filteredPerson }) => {\r\n        if (window.confirm(\"Delete \" + `${filteredPerson.name}` + \"?\")) {\r\n            personService\r\n                .removePerson(filteredPerson.id)\r\n            console.log('removePerson', filteredPerson.id)\r\n            //Päivitetään lista persons eli poistetaan listalata ne jotka poistetaan myös\r\n            //Tietokannasta\r\n            setPersons(persons.filter(item => item.name !== filteredPerson.name))\r\n            //Asetetaan viesti onnistuneesta poistosta\r\n            setErrorMessage('Person ' + `${filteredPerson.name}` + ' succesfully removed')\r\n            //Poiston viestille timeout eli kauanko näkyvillä\r\n            //Ja asetetaan arvoksi sen jälkeen null\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            }, 5000)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Filter value={howToFilter} onChange={handleFilterChange} />\r\n\r\n            <h2>Add a new</h2>\r\n            <Notification message={errorMessage} />\r\n            <NotificationAdded message={addedMessage} />\r\n            <PersonForm valueName={newName} onChangeName={handleNameChange} valueNumber={newNumber} onChangeNumber={handleNumberChange} onSubmit={addName} />\r\n\r\n            <h2>Numbers</h2>\r\n            <>\r\n                {persons.filter(person => person.name.toLocaleLowerCase().includes(`${howToFilter}`)).map(filteredPerson => (\r\n                    <RenderPersons key={filteredPerson.id} person={filteredPerson} onClick={() => removePerson({ filteredPerson })} />\r\n                ))\r\n                }\r\n            </>\r\n\r\n      ...<div>debugNameField: {newName}</div>\r\n      ...<div>debugFilterField: {howToFilter}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n"],"sourceRoot":""}